import Module from './ring-buffer-static/variable-buffer-kernel.wasmmodule.js';
import { HeapAudioBuffer, RingBuffer } from './ring-buffer-static/wasm-audio-helper.js';

class RingBufferWorklet extends AudioWorkletProcessor {
    constructor(options) {
        super();

        this._kernelBufferSize = options.processorOptions.kernelBufferSize;
        this._channelCount = options.processorOptions.channelCount;
        this._sampleRate = 48000;

        // --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É—Ñ–µ—Ä–∞ ---
        const bufferDurationSec = 16; // 16 —Å–µ–∫—É–Ω–¥
        const bufferFrames = Math.floor(this._sampleRate * bufferDurationSec);

        this._inputRingBuffer = new RingBuffer(bufferFrames, this._channelCount);
        this._outputRingBuffer = new RingBuffer(bufferFrames, this._channelCount);

        this._needMoreThresholdSec = 8;      // üîπ –ü–æ—Ä–æ–≥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è "needMoreData"
        // this._needMoreIntervalMs = 1000;     // üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        // this._lastNeedMoreAt = 0;            // üîπ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞

        // --- Heap –±—É—Ñ–µ—Ä—ã –¥–ª—è wasm ---
        this._heapInputBuffer = new HeapAudioBuffer(Module, this._kernelBufferSize, this._channelCount);
        this._heapOutputBuffer = new HeapAudioBuffer(Module, this._kernelBufferSize, this._channelCount);

        // --- WASM —è–¥—Ä–æ ---
        this._kernel = new Module.VariableBufferKernel(this._kernelBufferSize);

        // –§–ª–∞–≥ –ø–∞—É–∑—ã
        this._paused = false;

        // –ú–∞—Å—Å–∏–≤ Float32Array –ø–æ –∫–∞–Ω–∞–ª–∞–º
        this._lastOutput = [];

        // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è
        this._playedFrames = 0;
        this._lastReportedSeconds = 0;
        this._reportIntervalSec = 1; // —Å–æ–æ–±—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ ‚â•1 —Å–µ–∫


        this._fadeInEnabled = false;
        this._fadeInDuration = 3; // —Å–µ–∫—É–Ω–¥
        this._fadeOutEnabled = false;
        this._fadeOutDuration = 3; // —Å–µ–∫—É–Ω–¥
        this._fadeOutBuffers = []; // –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö fadeOut –±—É—Ñ–µ—Ä–æ–≤

        function tryFlushResidual() {
            if (!this._residualChunk) return;

            const rb = this._inputRingBuffer;
            const K = this._kernelBufferSize;
            const framesFree = Math.max(0, rb._length - rb.framesAvailable);

            if (framesFree < K) {
                // –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–∞–∂–µ –Ω–∞ –æ–¥–∏–Ω –±–ª–æ–∫
                return;
            }

            // —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –º—ã –º–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
            const maxBlocksBySpace = Math.floor(framesFree / K);
            const framesInResidual = this._residualChunk[0].length;
            const fullBlocksInResidual = Math.floor(framesInResidual / K);
            const blocksToWrite = Math.min(maxBlocksBySpace, fullBlocksInResidual);
            const framesToWrite = blocksToWrite * K;

            if (blocksToWrite <= 0) return;

            // –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º subChunk –∏ –∑–∞–ø–∏—à–µ–º
            const subChunk = this._residualChunk.map(ch => ch.subarray(0, framesToWrite));
            rb.push(subChunk);

            // –æ–±–Ω–æ–≤–∏–º residual (–æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ö–≤–æ—Å—Ç)
            const leftover = framesInResidual - framesToWrite;
            if (leftover > 0) {
                this._residualChunk = this._residualChunk.map(ch => ch.subarray(framesToWrite));
            } else {
                this._residualChunk = null;
            }

            return true;
        }


        // --- validate incoming chunk ---
        function validateChunk(chunk) {
            const frames = chunk[0].length;
            for (let ch = 0; ch < chunk.length; ch++) {
                const arr = chunk[ch];
                if (!arr || arr.length !== frames) {
                    return { ok: false, reason: 'bad_length' };
                }

                // quick NaN/Inf check on boundaries and some samples (not every sample to save CPU)
                if (!isFinite(arr[0]) || !isFinite(arr[frames-1])) {
                    return { ok: false, reason: 'nan_inf_edge' };
                }

                // sample a few points
                for (let i = 0; i < Math.min(8, frames); i++) {
                    if (!isFinite(arr[i])) {
                        return { ok: false, reason: 'nan_inf_sample' };
                    }
                }
            }

            return { ok: true };
        }


        this.clear = () => {
            this._paused = true;
            this._shouldFadeInNextChunk = true;

            // –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ringbuffers
            this._inputRingBuffer.clear();
            this._outputRingBuffer.clear();

            // —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —è–¥—Ä–∞ –∏ –∫—ç—à–µ–π
            this._residualChunk = null;
            this._lastOutput = null;
            this._lastSample = null;
            this._staleCount = 0;
            this._needMore = false;

            // –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã—Ö–æ–¥ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ process —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è)
            if (this._heapOutputBuffer) {
                const out = this._heapOutputBuffer.getChannelData();
                for (let ch = 0; ch < out.length; ch++) out[ch].fill(0);
            }

            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–≥–æ
            this._playedFrames = 0;
            this._lastReportedSeconds = 0;
        }


        this.port.onmessage = (event) => {
            const data = event.data;

            switch (data.command) {
                case 'pushChunk': {
                    try {
                        const chunk = data.chunk; // –º–∞—Å—Å–∏–≤ Float32Array –ø–æ –∫–∞–Ω–∞–ª–∞–º
                        const K = this._kernelBufferSize;


                        // –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
                        if (this._residualChunk) {
                            for (let ch = 0; ch < this._channelCount; ch++) {
                                const old = this._residualChunk[ch];
                                const combined = new Float32Array(old.length + chunk[ch].length);
                                combined.set(old, 0);
                                combined.set(chunk[ch], old.length);
                                chunk[ch] = combined;
                            }
                            this._residualChunk = null;
                        }

                        const frames = chunk[0].length;

                        const validation = validateChunk(chunk);
                        if (!validation.ok) {
                            this._residualChunk = chunk.map(ch => ch.slice());
                            break;
                        }


                        const fullBlocks = Math.floor(frames / K);

                        // --- –µ—Å–ª–∏ –≤–µ—Å—å —á–∞–Ω–∫ –º–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ ---
                        if (fullBlocks === 0) {
                            this._residualChunk = chunk.map(ch => ch.slice());
                            break;
                        }


                        const framesToWrite = fullBlocks * K;
                        const rb = this._inputRingBuffer;
                        const framesFree = rb._length - rb.framesAvailable;

                        // --- –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –±–ª–æ–∫ ---
                        const writableFrames = Math.min(framesToWrite, Math.floor(framesFree / K) * K);

                        if (writableFrames > 0) {
                            const subChunk = chunk.map(ch => ch.subarray(0, writableFrames));

                            // --- FADING LOGIC ---
                            if (this._fadeInEnabled && this._shouldFadeInNextChunk) {
                                const fadeInFrames = Math.min(
                                    writableFrames,
                                    Math.floor(this._fadeInDuration * sampleRate)
                                );
                                for (let ch = 0; ch < this._channelCount; ch++) {
                                    const data = subChunk[ch];
                                    for (let i = 0; i < fadeInFrames; i++) {
                                        const gain = i / fadeInFrames;
                                        data[i] *= gain;
                                    }
                                }
                                this._shouldFadeInNextChunk = false;
                            }

                            rb.push(subChunk);


                            const leftover = frames - writableFrames;
                            if (leftover > 0) {
                                this._residualChunk = chunk.map(ch => ch.subarray(writableFrames));
                            } else {
                                this._residualChunk = null;
                            }
                        } else {
                            console.warn(`[pushChunk] buffer full (free=${framesFree}, need=${framesToWrite})`);
                            this._residualChunk = chunk.map(ch => ch.slice());
                        }

                        delete this._needMore;
                        this._paused = false;
                    } catch (err) {}
                    break;
                }

                case 'strongClear':
                    this.clear();
                    break;

                case 'clear':
                    if (!this._fadeOutEnabled) {
                        this.clear();
                        break;
                    }

                    // --- fadeOut –≤–∫–ª—é—á—ë–Ω ---
                    const framesAvailable = this._outputRingBuffer.framesAvailable;
                    const maxFrames = Math.floor(this._sampleRate * this._fadeOutDuration);
                    const framesToCopy = Math.min(framesAvailable, maxFrames);

                    if (framesToCopy > 0) {
                        const temp = [];
                        for (let ch = 0; ch < this._channelCount; ch++) {
                            temp[ch] = new Float32Array(framesToCopy);
                        }
                        this._outputRingBuffer.pull(temp);

                        this._fadeOutBuffers.push({
                            data: temp,
                            position: 0,
                            totalFrames: framesToCopy
                        });
                    }

                    this.clear();
                    break;

                case 'setCrossfadeDuration':
                    if (data > 0) {
                        this._fadeInDuration = +data || 3;
                        this._fadeOutDuration = +data || 3;
                    }
                    break;

                case 'enableCrossfade':
                    this._fadeInEnabled = true;
                    this._fadeOutEnabled = true;
                    break;

                case 'disableCrossfade':
                    this._fadeInEnabled = false;
                    this._fadeOutEnabled = false;
                    break;

                case 'pause':
                    this._paused = true;
                    break;

                case 'resume':
                    this._paused = false;
                    break;
            }
        };
    }

    process(inputs, outputs) {
        const output = outputs[0];
        const frames = output[0].length; // –æ–±—ã—á–Ω–æ 128
        const channels = output.length;


        if (this._paused) {
            // –æ–±–Ω—É–ª—è–µ–º –≤—ã—Ö–æ–¥
            for (let ch = 0; ch < channels; ch++) {
                output[ch].fill(0);
            }

            // –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º fadeOut –±—É—Ñ–µ—Ä—ã
            if (this._fadeOutBuffers?.length > 0) {
                for (let i = this._fadeOutBuffers.length - 1; i >= 0; i--) {
                    const fb = this._fadeOutBuffers[i];
                    const remaining = fb.totalFrames - fb.position;
                    if (remaining <= 0) {
                        this._fadeOutBuffers.splice(i, 1);
                        continue;
                    }

                    const framesNow = Math.min(frames, remaining);
                    const start = fb.position;
                    const end = start + framesNow;

                    for (let ch = 0; ch < channels; ch++) {
                        const src = fb.data[ch];
                        const dst = output[ch];
                        for (let f = 0; f < framesNow; f++) {
                            const globalPos = start + f;
                            const t = globalPos / fb.totalFrames;
                            const gain = 1 - t;
                            dst[f] += src[globalPos] * gain;
                        }
                    }

                    fb.position += framesNow;
                    if (fb.position >= fb.totalFrames) {
                        this._fadeOutBuffers.splice(i, 1);
                    }
                }

                // –ø–æ–∫–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ fadeOutBuffers ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–∑—ã–≤–∞—Ç—å process()
                return true;
            }

            // –µ—Å–ª–∏ –ø–∞—É–∑–∞ –∏ –Ω–µ—Ç fadeOut ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–∏—à–∏–Ω–∞
            return true;
        }


        // --- kernel processing (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ---
        if (this._inputRingBuffer.framesAvailable >= this._kernelBufferSize) {
            this._inputRingBuffer.pull(this._heapInputBuffer.getChannelData());

            this._kernel.process(
                this._heapInputBuffer.getHeapAddress(),
                this._heapOutputBuffer.getHeapAddress(),
                this._channelCount
            );

            this._outputRingBuffer.push(this._heapOutputBuffer.getChannelData());
        }

        // --- –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞ ---
        // –ü–∞—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–º/–∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º:
        if (typeof this._staleCount === 'undefined') {
            this._staleCount = 0;
        }

        if (typeof this._maxHoldQuanta === 'undefined') {
            this._maxHoldQuanta = 2; // —Å–∫–æ–ª—å–∫–æ –∫–≤–∞–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ "–ø–æ–≤—Ç–æ—Ä—è—Ç—å" –º–∞–∫—Å–∏–º—É–º
        }

        if (typeof this._fadeFrames === 'undefined') {
            this._fadeFrames = Math.min(32, frames); // fade –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–Ω—Ç–∞
        }

        if (this._outputRingBuffer.framesAvailable >= frames) {
            // –ù–æ—Ä–º–∞–ª—å–Ω–æ: –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∫–≤–∞–Ω—Ç ‚Äî —á–∏—Ç–∞–µ–º –∏ –∫–µ—à–∏—Ä—É–µ–º
            this._outputRingBuffer.pull(output);



            // --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–≤–∞–Ω—Ç–∞ ---
            function analyzeBlock(output, lastSamplePerChannel) {
                const frames = output[0].length;
                const channels = output.length;
                let bad = false;
                let reason = null;
                let maxAbs = 0;
                let anyNonZero = false;
                for (let ch = 0; ch < channels; ch++) {
                    const arr = output[ch];
                    if (!arr) {
                        bad = true;
                        reason = 'no_channel';
                        break;
                    }

                    for (let i = 0; i < frames; i += Math.max(1, Math.floor(frames / 8))) { // sample some positions
                        const v = arr[i];

                        if (!isFinite(v)) {
                            bad = true;
                            reason = 'nan_inf';
                            break;
                        }

                        const a = Math.abs(v);
                        if (a > maxAbs) {
                            maxAbs = a;
                        }

                        if (a > 1e-8) {
                            anyNonZero = true;
                        }
                    }
                    if (bad) {
                        break;
                    }
                }

                // all-zero after non-zero detection handled outside (we'll check lastOutput)
                return { bad, reason, maxAbs, anyNonZero };
            }

            // call it
            const analysis = analyzeBlock.call(this, output, this._lastSample);
            if (analysis.bad) {
                // protective fallback: replace output with lastOutput (if exists) or zero
                if (this._lastOutput && this._lastOutput.length > 0) {
                    for (let ch = 0; ch < channels; ch++) output[ch].set(this._lastOutput[ch]);
                } else {
                    for (let ch = 0; ch < channels; ch++) output[ch].fill(0);
                }
            }


            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞–Ω—Ç (–∫–æ–ø–∏—è)
            this._lastOutput = output.map(ch => ch.slice());
            // –ò –∑–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª –Ω–∞ –∫–∞–Ω–∞–ª (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
            this._lastSample = output.map(ch => ch[frames - 1]);

            this._staleCount = 0; // —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ "—Å—Ç–∞—Ä–æ—Å—Ç–∏"
        } else {
            // –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö (gap)
            if (this._lastOutput && this._lastOutput.length > 0 && this._staleCount < this._maxHoldQuanta) {
                // –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–≤–∞–Ω—Ç, –Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º fade-out –ø–æ –∫–≤–∞–Ω—Ç–∞–º:
                const holdFactor = 1 - (this._staleCount / this._maxHoldQuanta); // 1.0, 0.5, ...
                for (let ch = 0; ch < channels; ch++) {
                    const src = this._lastOutput[ch];
                    const dst = output[ch];
                    // –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–Ω—Ç–∞ –¥–µ–ª–∞–µ–º –ª–∏–Ω–µ–π–Ω—ã–π fade-to-zero (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–∫–∞—á–æ–∫)
                    for (let i = 0; i < frames; i++) {
                        const fade = (i < this._fadeFrames) ? (1 - i / this._fadeFrames) : 0;
                        dst[i] = src[i] * fade * holdFactor;
                    }
                }
                this._staleCount++;
                // –ï—Å–ª–∏ —ç—Ç–æ—Ç –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–≤—Ç–æ—Ä ‚Äî –æ—á–∏—Å—Ç–∏–º lastOutput, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ –±—ã—Ç—å —Ç–∏—à–∏–Ω–µ
                if (this._staleCount >= this._maxHoldQuanta) {
                    this._lastOutput = null;
                }
            } else {
                // –ù–µ—Ç lastOutput –∏–ª–∏ —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã ‚Äî –æ—Ç–¥–∞–µ–º —Ç–∏—à–∏–Ω—É
                for (let ch = 0; ch < channels; ch++) {
                    output[ch].fill(0);
                }
                // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ lastOutput –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ
                this._lastOutput = null;
                this._staleCount = 0;
            }
        }

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ 8 —Å–µ–∫—É–Ω–¥ ---
        const secondsAvailable = this._outputRingBuffer.framesAvailable / this._sampleRate;

        if (!this._needMore && secondsAvailable && !this._inputRingBuffer.framesAvailable) {
            if (secondsAvailable <= this._needMoreThresholdSec) {


                // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –µ—â–µ –æ–¥–Ω–æ–≥–æ –±—É—Ñ—Ñ–µ—Ä–∞
                try {
                    if (typeof this.tryFlushResidual === 'function') {
                        if (this.tryFlushResidual()) {
                            return true;
                        }
                    }
                } catch (e) {
                }


                this._needMore = true;
                this.port.postMessage({
                    event: 'needMoreData'
                });
            }
        }


        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–æ –∞—É–¥–∏–æ
        const isPlayingAudio =
            !this._paused &&
            !this._wasEmpty &&
            this._outputRingBuffer.framesAvailable >= frames;

        if (isPlayingAudio) {
            this._playedFrames += frames;

            const playedSeconds = Math.floor(this._playedFrames / this._sampleRate);
            if (playedSeconds > this._lastReportedSeconds) {
                this._lastReportedSeconds = playedSeconds;
                this.port.postMessage({
                    event: 'playedSeconds',
                    value: playedSeconds
                });
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–∞ –±—É—Ñ–µ—Ä–∞ –ø—É—Å—Ç—ã–µ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ)
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤
        const inputEmpty = this._inputRingBuffer.framesAvailable === 0;
        const outputEmpty = this._outputRingBuffer.framesAvailable === 0;
        const allEmpty = inputEmpty && outputEmpty;

        // –µ—Å–ª–∏ –æ–±–∞ –ø—É—Å—Ç—ã–µ, –∏ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–∏ ‚Äî –ø–æ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        if (allEmpty && !this._wasEmpty) {
            this.port.postMessage({ event: 'buffersEmpty' });
            this._wasEmpty = true;
        }

        // –µ—Å–ª–∏ —Ç–µ–ø–µ—Ä—å —á—Ç–æ-—Ç–æ –ø—Ä–∏—à–ª–æ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        if (!allEmpty && this._wasEmpty) {
            this._wasEmpty = false;
        }

        // --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö fade-out –±—É—Ñ–µ—Ä–æ–≤ ---
        if (this._fadeOutBuffers.length > 0) {
            for (let i = this._fadeOutBuffers.length - 1; i >= 0; i--) {
                const fb = this._fadeOutBuffers[i];
                const remaining = fb.totalFrames - fb.position;
                if (remaining <= 0) {
                    this._fadeOutBuffers.splice(i, 1);
                    continue;
                }

                const framesNow = Math.min(frames, remaining);
                const start = fb.position;
                const end = start + framesNow;

                for (let ch = 0; ch < output.length; ch++) {
                    const src = fb.data[ch];
                    const dst = output[ch];

                    for (let f = 0; f < framesNow; f++) {
                        const globalPos = start + f;
                        const t = globalPos / fb.totalFrames; // 0..1
                        const gain = 1 - t; // –ª–∏–Ω–µ–π–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
                        dst[f] += src[globalPos] * gain;
                    }
                }

                fb.position += framesNow;
                if (fb.position >= fb.totalFrames) {
                    this._fadeOutBuffers.splice(i, 1);
                }
            }
        }


        return true;
    }

}

registerProcessor('ring-buffer-worklet', RingBufferWorklet);
